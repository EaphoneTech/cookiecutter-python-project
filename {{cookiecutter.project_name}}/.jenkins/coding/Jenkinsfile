pipeline {
  agent {
    docker {
      image 'biggates/poetry:2.0.1-py3.10-slim'
    }
  }

  stages {
    stage('检出') {
      steps{
        checkout([
          $class: 'GitSCM',
          branches: [[name: env.GIT_BUILD_REF]],
          userRemoteConfigs: [[
            url: env.GIT_REPO_URL,
            credentialsId: env.CREDENTIALS_ID
          ]]
        ])
      }
    }

    stage('安装依赖项') {
      steps {
        withCredentials([usernamePassword(credentialsId:'44404aed-5649-4b01-966d-8f009f01fa56',usernameVariable:'CODING_USER_NAME',passwordVariable:'CODING_PASSWORD')]) {
          sh 'poetry config http-basic.eaphone-protected $CODING_USER_NAME $CODING_PASSWORD'
          sh 'poetry install --with ci{% if cookiecutter.include_pytest -%},testing{% endif %}{% if cookiecutter.include_sphinx -%},docs{% endif %}'
        }
      }
    }

    {% if cookiecutter.install_as_package -%}
    stage('编译 package') {
      steps {
        sh 'poetry build --format wheel'
      }
    }
    {% endif %}

    {% if cookiecutter.include_pytest -%}
    stage('运行单元测试') {
      steps {
        sh 'poetry run tox'
      }
      post {
        always {
          junit 'reports/test-result.xml'

          codingHtmlReport(
            name: 'cov-report',
            tag: 'test',
            path: 'htmlcov',
            des: '代码覆盖率报告',
            entryFile: 'index.html'
          )
        }
      }
    }
    {% endif %}

    {% if cookiecutter.include_sphinx -%}
    stage('编译文档') {
      steps {
        dir ('./docs') {
          sh 'poetry run sphinx-build -M html source build'
        }
      }
      post {
        always {
          codingHtmlReport(
            name: 'sphinx',
            tag: 'docs',
            path: 'docs/build/html',
            des: '文档',
            entryFile: 'index.html'
          )
        }
      }
    }

    stage('部署文档') {
      steps {
        dir ('./docs/build/') {
          sh 'mv html {{ cookiecutter.project_name.lower().replace(' ', '-') }}'

          script {
            def deploy_host = [:]
            deploy_host.name = "deploy.xinxiangsui.com.cn"
            deploy_host.host = "deploy.xinxiangsui.com.cn"
            deploy_host.allowAnyHosts = true

            withCredentials([sshUserPrivateKey(credentialsId: "4636b3da-9993-4b7b-b107-b8d8a2ca57a2", keyFileVariable: 'identity')]) {
              deploy_host.user = "staticfile"
              deploy_host.identityFile = identity

              sshPut remote: deploy_host, from: '{{ cookiecutter.project_name.lower().replace(' ', '-') }}', into: '/mnt/test/open/raw/python/'
            }
          }
        }
      }
    }
    {% endif %}

    {% if cookiecutter.install_as_package -%}
    stage('上传 package') {
      steps {
        withCredentials([usernamePassword(
          credentialsId: env.CODING_ARTIFACTS_CREDENTIALS_ID,
          usernameVariable: 'TWINE_USERNAME',
          passwordVariable: 'TWINE_PASSWORD'
        )]) {
          sh "poetry config repositories.coding_protected https://biggates-pypi.pkg.coding.net/python-projects/protected"
          sh "poetry publish --repository coding_protected -u ${TWINE_USERNAME} -p ${TWINE_PASSWORD} --ansi"
        }

        echo 'wheel 制品上传完成'
      }
    }
    {% endif %}
  }
}
